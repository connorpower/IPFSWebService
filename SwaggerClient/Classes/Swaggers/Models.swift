// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source, nil) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0, instance: nil) }
    }

    static func decode<T, Key>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value, instance: nil)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return (source as! NSNumber).int32Value as! T
        }
        if T.self is Int64.Type && source is NSNumber {
            return (source as! NSNumber).int64Value as! T
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source, instance) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source, instance: nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [AddResponse]
        Decoders.addDecoder(clazz: [AddResponse].self) { (source: AnyObject, instance: AnyObject?) -> [AddResponse] in
            return Decoders.decode(clazz: [AddResponse].self, source: source)
        }
        // Decoder for AddResponse
        Decoders.addDecoder(clazz: AddResponse.self) { (source: AnyObject, instance: AnyObject?) -> AddResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? AddResponse() : instance as! AddResponse
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"] as AnyObject?)
            result.hash = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Hash"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Size"] as AnyObject?)
            return result
        }


        // Decoder for [Key]
        Decoders.addDecoder(clazz: [Key].self) { (source: AnyObject, instance: AnyObject?) -> [Key] in
            return Decoders.decode(clazz: [Key].self, source: source)
        }
        // Decoder for Key
        Decoders.addDecoder(clazz: Key.self) { (source: AnyObject, instance: AnyObject?) -> Key in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? Key() : instance as! Key
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"] as AnyObject?)
            return result
        }


        // Decoder for [KeyList]
        Decoders.addDecoder(clazz: [KeyList].self) { (source: AnyObject, instance: AnyObject?) -> [KeyList] in
            return Decoders.decode(clazz: [KeyList].self, source: source)
        }
        // Decoder for KeyList
        Decoders.addDecoder(clazz: KeyList.self) { (source: AnyObject, instance: AnyObject?) -> KeyList in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? KeyList() : instance as! KeyList
            
            result.keys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Keys"] as AnyObject?)
            return result
        }


        // Decoder for [PinResponse]
        Decoders.addDecoder(clazz: [PinResponse].self) { (source: AnyObject, instance: AnyObject?) -> [PinResponse] in
            return Decoders.decode(clazz: [PinResponse].self, source: source)
        }
        // Decoder for PinResponse
        Decoders.addDecoder(clazz: PinResponse.self) { (source: AnyObject, instance: AnyObject?) -> PinResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PinResponse() : instance as! PinResponse

            result.pins = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Pins"] as AnyObject?)
            result.progress = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Progress"] as AnyObject?)
            return result
        }


        // Decoder for [PublishResponse]
        Decoders.addDecoder(clazz: [PublishResponse].self) { (source: AnyObject, instance: AnyObject?) -> [PublishResponse] in
            return Decoders.decode(clazz: [PublishResponse].self, source: source)
        }
        // Decoder for PublishResponse
        Decoders.addDecoder(clazz: PublishResponse.self) { (source: AnyObject, instance: AnyObject?) -> PublishResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? PublishResponse() : instance as! PublishResponse
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Value"] as AnyObject?)
            return result
        }


        // Decoder for [ResolveResponse]
        Decoders.addDecoder(clazz: [ResolveResponse].self) { (source: AnyObject, instance: AnyObject?) -> [ResolveResponse] in
            return Decoders.decode(clazz: [ResolveResponse].self, source: source)
        }
        // Decoder for ResolveResponse
        Decoders.addDecoder(clazz: ResolveResponse.self) { (source: AnyObject, instance: AnyObject?) -> ResolveResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ResolveResponse() : instance as! ResolveResponse
            
            result.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Path"] as AnyObject?)
            return result
        }


        // Decoder for [KeygenResponse]
        Decoders.addDecoder(clazz: [KeygenResponse].self) { (source: AnyObject, instance: AnyObject?) -> [KeygenResponse] in
            return Decoders.decode(clazz: [KeygenResponse].self, source: source)
        }
        // Decoder for KeygenResponse
        Decoders.addDecoder(clazz: KeygenResponse.self) { (source: AnyObject, instance: AnyObject?) -> KeygenResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? KeygenResponse() : instance as! KeygenResponse
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Name"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["Id"] as AnyObject?)
            return result
        }


        // Decoder for [ListKeysResponse]
        Decoders.addDecoder(clazz: [ListKeysResponse].self) { (source: AnyObject, instance: AnyObject?) -> [ListKeysResponse] in
            return Decoders.decode(clazz: [ListKeysResponse].self, source: source)
        }
        // Decoder for ListKeysResponse
        Decoders.addDecoder(clazz: ListKeysResponse.self) { (source: AnyObject, instance: AnyObject?) -> ListKeysResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? ListKeysResponse() : instance as! ListKeysResponse
            
            result.keys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Keys"] as AnyObject?)
            return result
        }


        // Decoder for [RemoveKeyResponse]
        Decoders.addDecoder(clazz: [RemoveKeyResponse].self) { (source: AnyObject, instance: AnyObject?) -> [RemoveKeyResponse] in
            return Decoders.decode(clazz: [RemoveKeyResponse].self, source: source)
        }
        // Decoder for RemoveKeyResponse
        Decoders.addDecoder(clazz: RemoveKeyResponse.self) { (source: AnyObject, instance: AnyObject?) -> RemoveKeyResponse in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? RemoveKeyResponse() : instance as! RemoveKeyResponse
            
            result.keys = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["Keys"] as AnyObject?)
            return result
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
